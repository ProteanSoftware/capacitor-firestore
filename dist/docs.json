{
  "api": {
    "name": "CapacitorFirestorePlugin",
    "slug": "capacitorfirestoreplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "initializeFirestore",
        "signature": "(options: FirestoreConfig) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "FirestoreConfig"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "param",
            "text": "options"
          }
        ],
        "docs": "Configure the firestore instance with new configuration options.",
        "complexTypes": [
          "FirestoreConfig"
        ],
        "slug": "initializefirestore"
      },
      {
        "name": "signInWithCustomToken",
        "signature": "(options: CustomToken) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "CustomToken"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "param",
            "text": "options"
          }
        ],
        "docs": "Login to firestore using a customer JWT token.",
        "complexTypes": [
          "CustomToken"
        ],
        "slug": "signinwithcustomtoken"
      },
      {
        "name": "getDocument",
        "signature": "<T>(options: DocumnentReference) => Promise<DocumentSnapshot<T>>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "DocumnentReference"
          }
        ],
        "returns": "Promise<DocumentSnapshot<T>>",
        "tags": [
          {
            "name": "param",
            "text": "options"
          },
          {
            "name": "returns",
            "text": "The document snapshot"
          }
        ],
        "docs": "Reads the document referred to by this DocumentReference",
        "complexTypes": [
          "DocumentSnapshot",
          "T",
          "DocumnentReference"
        ],
        "slug": "getdocument"
      },
      {
        "name": "updateDocument",
        "signature": "<T>(options: UpdateDocument<T>) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "UpdateDocument<T>"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "param",
            "text": "options"
          },
          {
            "name": "returns",
            "text": "A `Promise` resolved once the data has been successfully written\r\nto the backend (note that it won't resolve while you're offline)."
          }
        ],
        "docs": "Updates fields in the document referred to by the specified DocumentReference.\r\nThe update will fail if applied to a document that does not exist.",
        "complexTypes": [
          "UpdateDocument",
          "T"
        ],
        "slug": "updatedocument"
      },
      {
        "name": "setDocument",
        "signature": "<T>(options: UpdateDocument<T>) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "UpdateDocument<T>"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "param",
            "text": "options"
          },
          {
            "name": "returns",
            "text": "A Promise resolved once the data has been successfully written\r\nto the backend (note that it won't resolve while you're offline)."
          }
        ],
        "docs": "Writes to the document referred to by the specified DocumentReference.\r\nIf the document does not yet exist, it will be created.\r\nIf you provide merge or mergeFields, the provided data can be merged into an existing document.",
        "complexTypes": [
          "UpdateDocument",
          "T"
        ],
        "slug": "setdocument"
      },
      {
        "name": "addDocumentSnapshotListener",
        "signature": "<T>(options: DocumnentReference, callback: DocumentSnapshotCallback<T>) => Promise<CallbackId>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "DocumnentReference"
          },
          {
            "name": "callback",
            "docs": "",
            "type": "DocumentSnapshotCallback<T>"
          }
        ],
        "returns": "Promise<string>",
        "tags": [
          {
            "name": "param",
            "text": "options"
          },
          {
            "name": "param",
            "text": "callback"
          },
          {
            "name": "returns",
            "text": "The callback id which can be used to remove the listener."
          }
        ],
        "docs": "Listen for snapshot changes on a document.",
        "complexTypes": [
          "DocumnentReference",
          "DocumentSnapshotCallback",
          "T",
          "CallbackId"
        ],
        "slug": "adddocumentsnapshotlistener"
      },
      {
        "name": "getCollection",
        "signature": "<T>(options: CollectionReference) => Promise<CollectionSnapshot<T>>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "CollectionReference"
          }
        ],
        "returns": "Promise<CollectionSnapshot<T>>",
        "tags": [
          {
            "name": "param",
            "text": "options"
          },
          {
            "name": "returns",
            "text": "The collection snapshot"
          }
        ],
        "docs": "Executes the query and returns the results as a CollectionSnapshot",
        "complexTypes": [
          "CollectionSnapshot",
          "T",
          "CollectionReference"
        ],
        "slug": "getcollection"
      },
      {
        "name": "addCollectionSnapshotListener",
        "signature": "<T>(options: CollectionReference, callback: CollectionSnapshotCallback<T>) => Promise<CallbackId>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "CollectionReference"
          },
          {
            "name": "callback",
            "docs": "",
            "type": "CollectionSnapshotCallback<T>"
          }
        ],
        "returns": "Promise<string>",
        "tags": [
          {
            "name": "param",
            "text": "options"
          },
          {
            "name": "param",
            "text": "callback"
          },
          {
            "name": "returns",
            "text": "The callback id which can be used to remove the listener."
          }
        ],
        "docs": "Listen for snapshot changes on a collection.",
        "complexTypes": [
          "CollectionReference",
          "CollectionSnapshotCallback",
          "T",
          "CallbackId"
        ],
        "slug": "addcollectionsnapshotlistener"
      },
      {
        "name": "removeSnapshotListener",
        "signature": "(options: RemoveSnapshotListener) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "RemoveSnapshotListener"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "param",
            "text": "options"
          }
        ],
        "docs": "Stop listening for snapshot changes on a document or collection.",
        "complexTypes": [
          "RemoveSnapshotListener"
        ],
        "slug": "removesnapshotlistener"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "FirestoreConfig",
      "slug": "firestoreconfig",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "projectId",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "\"my-first-project\"",
              "name": "example"
            }
          ],
          "docs": "Set the GCP/Firebase project id",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "applicationId",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "\"1:00000000000:web:abc00000000000000000\"",
              "name": "example"
            }
          ],
          "docs": "Set the Firebase application id",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "apiKey",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            },
            {
              "text": "\"XxxxxxxxxxxXXxxxxxxxxx\"",
              "name": "example"
            }
          ],
          "docs": "Set the Firebase api key",
          "complexTypes": [],
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "CustomToken",
      "slug": "customtoken",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "token",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "DocumentSnapshot",
      "slug": "documentsnapshot",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "id",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The id of the document.",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "data",
          "tags": [
            {
              "text": "1.0.0",
              "name": "since"
            }
          ],
          "docs": "The fields of the document or null if the document doesn't exist.",
          "complexTypes": [
            "T"
          ],
          "type": "T | null"
        }
      ]
    },
    {
      "name": "DocumnentReference",
      "slug": "documnentreference",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "reference",
          "tags": [],
          "docs": "A reference to the document/collection",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "UpdateDocument",
      "slug": "updatedocument",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "data",
          "tags": [],
          "docs": "An object containing the fields and values with which to\r\nupdate the document. Fields can contain dots to reference nested fields\r\nwithin the document",
          "complexTypes": [
            "Partial",
            "T"
          ],
          "type": "Partial<T>"
        }
      ]
    },
    {
      "name": "CollectionSnapshot",
      "slug": "collectionsnapshot",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "collection",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "DocumentSnapshot",
            "T"
          ],
          "type": "DocumentSnapshot<T>[]"
        }
      ]
    },
    {
      "name": "CollectionReference",
      "slug": "collectionreference",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "queryConstraints",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "QueryConstraint"
          ],
          "type": "QueryConstraint[] | undefined"
        }
      ]
    },
    {
      "name": "QueryConstraint",
      "slug": "queryconstraint",
      "docs": "A `QueryConstraint` is used to narrow the set of documents returned by a\r\nFirestore query.",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "fieldPath",
          "tags": [],
          "docs": "The path to compare",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "opStr",
          "tags": [],
          "docs": "The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\r\n\"&lt;=\", \"!=\", \"array-contains\")",
          "complexTypes": [
            "QueryOperators"
          ],
          "type": "QueryOperators"
        },
        {
          "name": "value",
          "tags": [],
          "docs": "The value for comparison",
          "complexTypes": [],
          "type": "any"
        }
      ]
    },
    {
      "name": "RemoveSnapshotListener",
      "slug": "removesnapshotlistener",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "callbackId",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "CallbackId"
          ],
          "type": "CallbackId"
        }
      ]
    }
  ],
  "enums": [],
  "typeAliases": [
    {
      "name": "Partial",
      "slug": "partial",
      "docs": "Make all properties in T optional",
      "types": [
        {
          "text": "{\r\n    [P in keyof T]?: T[P];\r\n}",
          "complexTypes": [
            "T",
            "P"
          ]
        }
      ]
    },
    {
      "name": "DocumentSnapshotCallback",
      "slug": "documentsnapshotcallback",
      "docs": "",
      "types": [
        {
          "text": "(data: DocumentSnapshot<T> | null, err?: any): void",
          "complexTypes": [
            "DocumentSnapshot",
            "T"
          ]
        }
      ]
    },
    {
      "name": "CallbackId",
      "slug": "callbackid",
      "docs": "",
      "types": [
        {
          "text": "string",
          "complexTypes": []
        }
      ]
    },
    {
      "name": "QueryOperators",
      "slug": "queryoperators",
      "docs": "Filter conditions in a {@link QueryConstraint} clause are specified using the\r\nstrings '&lt;', '&lt;=', '==', '&gt;=', '&gt;', 'array-contains'",
      "types": [
        {
          "text": "\"==\"",
          "complexTypes": []
        },
        {
          "text": "\">=\"",
          "complexTypes": []
        },
        {
          "text": "\"<=\"",
          "complexTypes": []
        },
        {
          "text": "\"<\"",
          "complexTypes": []
        },
        {
          "text": "\">\"",
          "complexTypes": []
        },
        {
          "text": "\"array-contains\"",
          "complexTypes": []
        }
      ]
    },
    {
      "name": "CollectionSnapshotCallback",
      "slug": "collectionsnapshotcallback",
      "docs": "",
      "types": [
        {
          "text": "(data: CollectionSnapshot<T> | null, err?: any): void",
          "complexTypes": [
            "CollectionSnapshot",
            "T"
          ]
        }
      ]
    }
  ],
  "pluginConfigs": []
}